import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  FlatList,
  Image,
  Dimensions,
  Platform,
  Animated,
  ScrollView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation, DrawerActions } from '@react-navigation/native';
import { DrawerNavigationProp } from '@react-navigation/drawer';
import { COLORS, FONTS, SIZES, SHADOWS } from '../../constants/theme';
import { InfinityLogo } from '../../components/common/InfinityLogo';

// Define drawer navigation types
type DrawerParamList = {
  Home: undefined;
  Library: undefined;
  TownSquare: undefined;
  Stream: undefined;
  Wallet: undefined;
  Profile: undefined;
  Messages: undefined;
};

// Define types for social feed
interface Post {
  id: string;
  username: string;
  caption: string;
  tags: string[];
  comments: number;
  likes: number;
  timestamp: string;
  isLiked: boolean;
  isBookmarked: boolean;
  imageUrl?: string; // Optional image URL for the post
}

interface Story {
  id: string;
  username: string;
  avatar: string;
  hasUnviewedStory: boolean;
}

// Mock data for posts
const POSTS: Post[] = [
  {
    id: '1',
    username: 'komix_adventures',
    caption: 'Just finished the latest issue! What do you think?',
    tags: ['#comics', '#artwork', '#newrelease'],
    comments: 42,
    likes: 187,
    timestamp: '2 hours ago',
    isLiked: false,
    isBookmarked: false,
    imageUrl: 'https://images.unsplash.com/photo-1618519764620-7403abdbdfe9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80'
  },
  {
    id: '2',
    username: 'inkmaster',
    caption: 'Working on some character concepts for my new series.',
    tags: ['#characterdesign', '#workinprogress', '#comicart'],
    comments: 23,
    likes: 156,
    timestamp: '4 hours ago',
    isLiked: true,
    isBookmarked: true,
    imageUrl: 'https://images.unsplash.com/photo-1605379399642-870262d3d051?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2006&q=80'
  },
  {
    id: '3',
    username: 'colorpalette',
    caption: 'Color palette exploration for the dystopian cityscape.',
    tags: ['#colors', '#digitalart', '#conceptart'],
    comments: 18,
    likes: 104,
    timestamp: '1 day ago',
    isLiked: false,
    isBookmarked: false,
    imageUrl: 'https://images.unsplash.com/photo-1633621412960-6df85eff8c85?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80'
  }
];

// Mock data for stories
const STORIES: Story[] = [
  { id: '1', username: 'You', avatar: '', hasUnviewedStory: false },
  { id: '2', username: 'quantum_ink', avatar: 'https://randomuser.me/api/portraits/women/44.jpg', hasUnviewedStory: true },
  { id: '3', username: 'cosmic_tales', avatar: 'https://randomuser.me/api/portraits/men/32.jpg', hasUnviewedStory: true },
  { id: '4', username: 'neon_creator', avatar: 'https://randomuser.me/api/portraits/women/68.jpg', hasUnviewedStory: false },
  { id: '5', username: 'pixel_master', avatar: 'https://randomuser.me/api/portraits/men/75.jpg', hasUnviewedStory: true },
  { id: '6', username: 'ink_whisperer', avatar: 'https://randomuser.me/api/portraits/women/89.jpg', hasUnviewedStory: false }
];

const HomeScreen = () => {
  const navigation = useNavigation<DrawerNavigationProp<DrawerParamList>>();
  const [posts, setPosts] = useState<Post[]>(POSTS);
  
  // Navigation functions
  const openDrawer = () => {
    navigation.dispatch(DrawerActions.openDrawer());
  };
  
  const navigateToNotifications = () => {
    console.log('Navigate to notifications');
  };
  
  const navigateToMessages = () => {
    console.log('Navigate to messages');
  };
  
  // Post interaction functions
  const handleLike = (id: string) => {
    setPosts(prevPosts => 
      prevPosts.map(post => {
        if (post.id === id) {
          const isLiked = !post.isLiked;
          const likeDelta = isLiked ? 1 : -1;
          return {
            ...post,
            isLiked,
            likes: post.likes + likeDelta
          };
        }
        return post;
      })
    );
  };
  
  const handleComment = (id: string) => {
    console.log('Comment pressed for post:', id);
  };
  
  const handleBookmark = (id: string) => {
    setPosts(prevPosts => 
      prevPosts.map(post => {
        if (post.id === id) {
          return {
            ...post,
            isBookmarked: !post.isBookmarked
          };
        }
        return post;
      })
    );
  };
  
  const handleShare = (id: string) => {
    console.log('Share pressed for post:', id);
  };
  
  // Render functions
  const renderHeader = () => (
    <View style={styles.header}>
      <TouchableOpacity onPress={openDrawer}>
        <Ionicons name="menu" size={28} color={COLORS.textPrimary} />
      </TouchableOpacity>
      
      <InfinityLogo size={40} color={COLORS.primary} />
      
      <View style={styles.headerRight}>
        <TouchableOpacity style={styles.headerIconButton} onPress={navigateToNotifications}>
          <Ionicons name="notifications" size={24} color={COLORS.textPrimary} />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.headerIconButton} onPress={navigateToMessages}>
          <Ionicons name="paper-plane" size={24} color={COLORS.textPrimary} />
        </TouchableOpacity>
      </View>
    </View>
  );
  
  const renderStoryItem = ({ item }: { item: Story }) => (
    <TouchableOpacity style={styles.storyItem}>
      <View style={[styles.storyRing, item.hasUnviewedStory && styles.activeStoryRing]}>
        <View style={styles.storyAvatar}>
          {item.avatar ? (
            <Image 
              source={{ uri: item.avatar }} 
              style={styles.storyAvatarImage} 
              defaultSource={require('../../assets/images/placeholder.png')}
            />
          ) : (
            <View style={styles.storyAvatarPlaceholder}>
              <Text style={styles.storyAvatarText}>{item.username.charAt(0).toUpperCase()}</Text>
            </View>
          )}
          
          {item.id === '1' && (
            <View style={styles.addStoryButton}>
              <Ionicons name="add" size={14} color={COLORS.textPrimary} />
            </View>
          )}
        </View>
      </View>
      
      <Text style={styles.storyUsername} numberOfLines={1}>
        {item.username}
      </Text>
    </TouchableOpacity>
  );
  
  const renderPostItem = ({ item }: { item: Post }) => (
    <View style={styles.postContainer}>
      {/* Post header with username and avatar */}
      <View style={styles.postHeader}>
        <View style={styles.postHeaderLeft}>
          <View style={styles.postAvatar}>
            <Text style={styles.postAvatarText}>{item.username.charAt(0).toUpperCase()}</Text>
          </View>
          <Text style={styles.postUsername}>{item.username}</Text>
        </View>
        
        <TouchableOpacity>
          <Ionicons name="ellipsis-horizontal" size={24} color={COLORS.textSecondary} />
        </TouchableOpacity>
      </View>
      
      {/* Post content */}
      <Text style={styles.postCaption}>{item.caption}</Text>
      
      {/* Post image if available */}
      {item.imageUrl && (
        <View style={styles.postImageContainer}>
          <Image 
            source={{ uri: item.imageUrl }} 
            style={styles.postImage} 
            resizeMode="cover"
          />
        </View>
      )}
      
      <View style={styles.postTags}>
        {item.tags.map((tag, index) => (
          <TouchableOpacity key={index}>
            <Text style={styles.postTag}>{tag}</Text>
          </TouchableOpacity>
        ))}
      </View>
      
      {/* Post interactions */}
      <View style={styles.postStats}>
        <View style={styles.postStatsLeft}>
          <TouchableOpacity 
            style={styles.postStatButton}
            onPress={() => handleLike(item.id)}
          >
            <Ionicons 
              name={item.isLiked ? "heart" : "heart-outline"} 
              size={24} 
              color={item.isLiked ? COLORS.accent1 : COLORS.textSecondary} 
            />
            <Text style={styles.postStatText}>{item.likes}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.postStatButton}
            onPress={() => handleComment(item.id)}
          >
            <Ionicons name="chatbubble-outline" size={22} color={COLORS.textSecondary} />
            <Text style={styles.postStatText}>{item.comments}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.postStatButton}
            onPress={() => handleShare(item.id)}
          >
            <Ionicons name="arrow-redo-outline" size={24} color={COLORS.textSecondary} />
          </TouchableOpacity>
        </View>
        
        <TouchableOpacity 
          onPress={() => handleBookmark(item.id)}
        >
          <Ionicons 
            name={item.isBookmarked ? "bookmark" : "bookmark-outline"} 
            size={24} 
            color={item.isBookmarked ? COLORS.primary : COLORS.textSecondary} 
          />
        </TouchableOpacity>
      </View>
      
      <Text style={styles.postTimestamp}>{item.timestamp}</Text>
    </View>
  );
  
  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={COLORS.background} />
      
      {renderHeader()}
      
      <FlatList
        data={posts}
        keyExtractor={item => item.id}
        renderItem={renderPostItem}
        showsVerticalScrollIndicator={false}
        ListHeaderComponent={
          <View style={styles.storiesContainer}>
            <FlatList
              data={STORIES}
              keyExtractor={item => item.id}
              horizontal
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={styles.storiesList}
              renderItem={renderStoryItem}
            />
          </View>
        }
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingTop: Platform.OS === 'ios' ? 44 : StatusBar.currentHeight! + 10,
    paddingBottom: 10,
    backgroundColor: COLORS.background,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerIconButton: {
    marginLeft: 16,
  },
  
  // Stories styles
  storiesContainer: {
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  storiesList: {
    paddingHorizontal: 12,
  },
  storyItem: {
    alignItems: 'center',
    marginHorizontal: 6,
    width: 70,
  },
  storyRing: {
    width: 68,
    height: 68,
    borderRadius: 34,
    padding: 2,
    borderWidth: 2,
    borderColor: COLORS.divider,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 4,
  },
  activeStoryRing: {
    borderColor: COLORS.primary,
  },
  storyAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: COLORS.backgroundLight,
    overflow: 'hidden',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  storyAvatarImage: {
    width: '100%',
    height: '100%',
  },
  storyAvatarPlaceholder: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.surface,
  },
  storyAvatarText: {
    ...FONTS.h3,
    color: COLORS.primary,
  },
  storyUsername: {
    ...FONTS.caption,
    color: COLORS.textSecondary,
    textAlign: 'center',
    marginTop: 2,
  },
  addStoryButton: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    backgroundColor: COLORS.primary,
    width: 20,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: COLORS.background,
  },
  
  // Post styles
  postContainer: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  postImageContainer: {
    width: '100%',
    height: 300,
    borderRadius: 8,
    overflow: 'hidden',
    marginVertical: 12,
  },
  postImage: {
    width: '100%',
    height: '100%',
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  postHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  postAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  postAvatarText: {
    ...FONTS.h3,
    color: COLORS.textPrimary,
  },
  postUsername: {
    ...FONTS.h3, // Using h3 instead of h4 which doesn't exist
    color: COLORS.textPrimary,
  },
  postCaption: {
    ...FONTS.body1,
    color: COLORS.textPrimary,
    marginBottom: 8,
    lineHeight: 20,
  },
  postTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  postTag: {
    ...FONTS.caption,
    color: COLORS.primary,
    marginRight: 8,
    marginBottom: 4,
  },
  postStats: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: COLORS.divider,
  },
  postStatsLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  postStatButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  postStatText: {
    ...FONTS.caption,
    marginLeft: 4,
    color: COLORS.textSecondary,
  },
  postTimestamp: {
    ...FONTS.caption,
    color: COLORS.textTertiary,
    marginTop: 8,
    fontSize: 12,
  },
});

export default HomeScreen;
